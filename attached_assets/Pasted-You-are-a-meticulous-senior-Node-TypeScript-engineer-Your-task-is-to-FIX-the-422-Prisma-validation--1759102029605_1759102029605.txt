You are a meticulous senior Node/TypeScript engineer. Your task is to FIX the 422 Prisma validation error on sign-up, make the service RUN on **Replit**, and CONFIRM the **Netlify Functions** deployment. Work directly in this repo:

- Repo: https://github.com/Rndynt/AuthCore
- Replit URL: https://c25f0f2e-887e-4494-845b-803084ff23ee-00-2rxeabtep8sj0.janeway.replit.dev
- Netlify URL: https://transity-auth.netlify.app

Operate in three phases and print a single final report at the end (compliance table + diffs + commands/output + smoke transcripts + final verdict).

================================================================
PHASE A — ROOT-CAUSE & FIX THE 422 (PrismaClientValidationError)
================================================================
Goal: ensure Prisma client, schema, and the actual database are IN SYNC and the server routes/handler pass the correct request body.

A1) Environment sanity
- Print masked env to confirm what the running process sees:
    echo "BETTER_AUTH_URL=$BETTER_AUTH_URL"
    echo "TRUSTED_ORIGINS=$TRUSTED_ORIGINS"
    echo "$DATABASE_URL" | sed 's/:.*@/:*****@/'
- Assert DATABASE_URL includes TLS for serverless Postgres (Neon, etc). If missing, append: ?sslmode=require

A2) Prisma versions & status
- Show installed versions:
    pnpm list @prisma/client prisma
- Verify schema is present and Better-Auth models were generated (search for tables like User, Session, Key, etc. in prisma/schema.prisma). If models are missing, regenerate (A3).

A3) Regenerate schema from Better-Auth + apply to DB
- Run, in order:
    pnpm prisma generate
    npx @better-auth/cli generate prisma --yes
    pnpm prisma migrate deploy || pnpm prisma migrate dev --name init
    pnpm prisma generate
- If migrations are not present and this is a fresh DB, you may do a one-time sync:
    pnpm prisma db push --accept-data-loss
  (Use db push only if migrate deploy/dev fails on a fresh environment.)

A4) Add clearer logs (so future errors are visible)
- In src/auth.ts, instantiate PrismaClient with logging:
    const prisma = new PrismaClient({ log: ['warn','error'] });
- In src/server.ts, add a global error handler:
    app.setErrorHandler((err, _req, reply) => {
      app.log.error({ err }, 'unhandled-error');
      reply.status(err.statusCode ?? 500).send({ error: 'internal_error' });
    });

A5) Route/handler correctness
- Confirm Fastify route forwards method/headers/body untouched to auth.handler for path /api/auth/*.
- Confirm content-type parser is not double-parsing into non-string body for Request(); if needed, stringify only when body is an object and keep undefined when no body.

A6) Rebuild and restart
- Commands:
    pnpm build
    pnpm dev

A7) Quick local smoke (against Replit URL)
- Health:
    curl -i "https://c25f0f2e-887e-4494-845b-803084ff23ee-00-2rxeabtep8sj0.janeway.replit.dev/healthz"
- Sign-up:
    curl -i -c cookie.txt -b cookie.txt -X POST \
      "https://c25f0f2e-887e-4494-845b-803084ff23ee-00-2rxeabtep8sj0.janeway.replit.dev/api/auth/sign-up/email" \
      -H "Content-Type: application/json" \
      --data '{"email":"demo@example.com","password":"Passw0rd!"}'
- Sign-in:
    curl -i -c cookie.txt -b cookie.txt -X POST \
      "https://c25f0f2e-887e-4494-845b-803084ff23ee-00-2rxeabtep8sj0.janeway.replit.dev/api/auth/sign-in/email" \
      -H "Content-Type: application/json" \
      --data '{"email":"demo@example.com","password":"Passw0rd!"}'
- Session:
    curl -i -c cookie.txt -b cookie.txt \
      "https://c25f0f2e-887e-4494-845b-803084ff23ee-00-2rxeabtep8sj0.janeway.replit.dev/api/auth/session"

If any of the above returns 422 with PrismaClientValidationError again, print the Prisma logs and the full stack from the global error handler, then repeat A3 to ensure the actual database has the required tables.

======================================================
PHASE B — GUARANTEE IT RUNS ON REPLIT (PORT, scripts, env)
======================================================
B1) PORT handling
- In src/env.ts, ensure:
    PORT defaults to Number(process.env.PORT || 3000)
- In src/server.ts:
    app.listen({ host: "0.0.0.0", port: env.PORT });

B2) Project scripts
- package.json MUST have:
    "dev": "tsx src/server.ts"
    "build": "tsc -p tsconfig.json"
    "start": "node dist/server.js"
    "prisma:gen": "prisma generate"
    "better-auth:gen": "npx @better-auth/cli generate prisma --yes"
    "prisma:migrate": "prisma migrate dev --name init"
    "prisma:deploy": "prisma migrate deploy"
- Ensure there is NO vite / express scripts or deps. If any remain:
    pnpm remove express @types/express vite vite-node @vitejs/plugin-* --silent || true
    git rm -f server/vite.ts vite.config.* || true
    grep -R --line-number -E "(express|Router\\(|app\\.use\\(|vite)" . || true

B3) Replit files
- Ensure .replit exists with:
    run = "pnpm dev"

B4) Env on Replit (Secrets)
- Required:
    DATABASE_URL (with sslmode=require)
    BETTER_AUTH_URL = the Replit public URL
    BETTER_AUTH_SECRET = a long random string
    TRUSTED_ORIGINS = include the Replit URL and any frontend domain
- After setting, re-run Phase A commands, then confirm:
    curl -i "<REPL_URL>/healthz"
    curl -i "<REPL_URL>/api/auth/session"

=============================================
PHASE C — VERIFY NETLIFY FUNCTIONS BEHAVIOR
=============================================
C1) netlify.toml must route:
- from /api/auth/* to /.netlify/functions/auth (status 200)

C2) Function bridge must:
- pass through method/headers/body to auth.handler,
- add CORS with Access-Control-Allow-Credentials: true and origin filtered by trustedOrigins,
- handle OPTIONS preflight,
- handle multiple cookies via multiValueHeaders (although session.cookieCache=false should keep a single cookie).

C3) Netlify smoke (use your domain)
- Sign-up:
    curl -i -c cookie.txt -b cookie.txt -X POST \
      "https://transity-auth.netlify.app/api/auth/sign-up/email" \
      -H "Content-Type: application/json" \
      --data '{"email":"demo@example.com","password":"Passw0rd!"}'
- Sign-in:
    curl -i -c cookie.txt -b cookie.txt -X POST \
      "https://transity-auth.netlify.app/api/auth/sign-in/email" \
      -H "Content-Type: application/json" \
      --data '{"email":"demo@example.com","password":"Passw0rd!"}'
- Session:
    curl -i -c cookie.txt -b cookie.txt \
      "https://transity-auth.netlify.app/api/auth/session"

===========================
ACCEPTANCE CRITERIA (ALL)
===========================
1) Replit: service starts, /healthz returns 200 with { ok: true }, sign-up → sign-in → session all return 2xx; no PrismaClientValidationError.  
2) Database: Prisma schema and DB are in sync (migrate deploy/dev succeeded).  
3) No Express/Vite anywhere; build is clean (pnpm build has 0 TS errors).  
4) Netlify: the three smoke calls succeed (2xx, cookie set), with correct CORS headers for credentials.  
5) Output a FINAL REPORT containing:
   - Compliance Report Table (✔/✖ per checklist item, with file paths touched),
   - Diff Summary (created/modified/removed),
   - Commands executed & key outputs,
   - Full transcripts of the Replit and Netlify smoke tests (status line + Set-Cookie/CORS headers),
   - One-line verdict: “Prisma/DB synced; Express/Vite removed; Fastify OK; Replit OK; Netlify OK.”

END OF PROMPT