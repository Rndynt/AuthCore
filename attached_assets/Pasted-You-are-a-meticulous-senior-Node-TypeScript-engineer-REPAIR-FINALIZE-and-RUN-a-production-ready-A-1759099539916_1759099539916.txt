You are a meticulous senior Node/TypeScript engineer. REPAIR, FINALIZE, and RUN a production-ready Auth Service using Fastify + better-auth (NO Express, NO Vite). Work directly in this repo:

- Repo: https://github.com/Rndynt/AuthCore

Operate in THREE PHASES and produce a single final report. Do NOT delegate to sub-agents; complete everything yourself.

================================================================
PHASE A — AUDIT & FIX (execute first, then fix all non-compliance)
================================================================
Goal: remove all Express/Vite remnants, align to spec, and make the codebase startable.

A1) HARD-REMOVE EXPRESS & VITE
- Delete or refactor any file importing express or vite. The file server/vite.ts MUST be deleted (reported as the blocker).
- Remove deps if present: express, @types/express, vite, vite-node, @vitejs/*.
- Verify removal with a grep:
  grep -R --line-number -E "(express|Router\\(|app\\.use\\(|vite)" . || true

A2) ENSURE FASTIFY + BETTER-AUTH ARE CORRECT
- Fastify with @fastify/cors; a catch-all route serves auth.handler at path /api/auth/*.
- better-auth config:
  - emailAndPassword.enabled = true
  - session.cookieCache = false  (avoid multi Set-Cookie quirks on Netlify)
  - trustedOrigins loaded from env
  - secret loaded from env
  - plugins enabled: admin(), organization(), apiKey(), jwt(), bearer()
- Add health endpoint: GET /healthz → { ok: true }

A3) PRISMA + POSTGRES
- prisma/schema.prisma uses provider = "postgresql" with DATABASE_URL env.
- Regenerate and migrate:
  pnpm prisma generate
  npx @better-auth/cli generate prisma --yes
  pnpm prisma migrate deploy || pnpm prisma migrate dev --name init
  pnpm prisma generate

A4) TYPESCRIPT / ESM
- package.json has "type": "module".
- Build must pass with zero TS errors (pnpm build).

A5) ENV & CORS
- .env.example includes: PORT, BETTER_AUTH_URL, BETTER_AUTH_SECRET, TRUSTED_ORIGINS, DATABASE_URL.
- @fastify/cors configured with credentials: true; origin validated against trustedOrigins; allowed headers include x-api-key.

A6) NETLIFY FUNCTIONS WIRING
- netlify.toml redirects /api/auth/* → /.netlify/functions/auth (status 200).
- netlify/functions/auth.ts bridges to auth.handler; handles OPTIONS; sets CORS; uses multiValueHeaders for Set-Cookie (when present).

A7) REQUIRED ROUTES
- GET /api/auth/session
- POST /api/auth/sign-up/email
- POST /api/auth/sign-in/email
- GET /me  (returns auth.api.getSession({ headers }))
- GET /healthz

A8) SCRIPTS (package.json)
- dev = tsx src/server.ts
- build = tsc -p tsconfig.json
- start = node dist/server.js
- prisma:gen, better-auth:gen, prisma:migrate, prisma:deploy
- netlify:dev, netlify:build, netlify:serve
- smoke:signup, smoke:signin, smoke:session (curl ready)

A9) README
- Explain features, env vars, DB setup, local dev, smoke tests, S2S (API Key/JWT), Netlify deployment steps, cookie/CORS notes.

OUTPUT AFTER PHASE A (print this before moving on):
- Compliance Report Table (✔/✖ for each item with file paths touched)
- Diff Summary (created/modified/removed files)
- Commands executed & outputs
- “Phase A complete” summary

=================================================
PHASE B — RUN ON REPLIT (MUST START AND RESPOND)
=================================================
Goal: service boots on Replit, uses correct PORT, and endpoints respond.

B1) REPLIT-FRIENDLY PORT & LISTEN
- In src/env.ts: ensure PORT resolves from process.env.PORT (Replit sets it) and defaults to 3000 if absent. For example:
  PORT defaults to Number(process.env.PORT || 3000)
- In src/server.ts: listen with host "0.0.0.0" and port env.PORT.
- On boot, log listening port and the trustedOrigins list.

B2) REPLIT PROJECT CONFIG
- Create .replit with:
  run = "pnpm dev"
- (Optional) replit.nix for Node 20+ and pnpm if needed.

B3) REPLIT SECRETS
- Set at least:
  PORT (Replit auto-injects; keep compatible)
  BETTER_AUTH_URL = the Replit public URL (update after first run)
  BETTER_AUTH_SECRET = long random string
  TRUSTED_ORIGINS = include your frontend domains AND the Replit URL
  DATABASE_URL = Postgres connection string

B4) RUN & VERIFY ON REPLIT
- Commands to execute:
  pnpm i
  pnpm prisma generate
  npx @better-auth/cli generate prisma --yes
  pnpm prisma migrate deploy || pnpm prisma migrate dev --name init
  pnpm prisma generate
  pnpm dev
- Verify with the Replit public URL:
  GET <REPL_URL>/healthz  → { ok: true }
  GET <REPL_URL>/api/auth/session → 200 (null or session)

- Smoke tests (replace <REPL_URL>):
  curl -i -c cookie.txt -b cookie.txt -X POST <REPL_URL>/api/auth/sign-up/email -H "Content-Type: application/json" --data '{"email":"demo@example.com","password":"Passw0rd!"}'
  curl -i -c cookie.txt -b cookie.txt -X POST <REPL_URL>/api/auth/sign-in/email -H "Content-Type: application/json" --data '{"email":"demo@example.com","password":"Passw0rd!"}'
  curl -i -c cookie.txt -b cookie.txt <REPL_URL>/api/auth/session
  curl -i -H "x-api-key: <YOUR_API_KEY>" <REPL_URL>/me

IF STARTUP FAILS:
- Confirm server/vite.ts and any vite.config.* are gone.
- Ensure dev script runs Fastify (tsx src/server.ts), not Vite.
- Run pnpm build and fix TS diagnostics.

==========================================================
PHASE C — VERIFY NETLIFY FUNCTIONS (BUILD-READY & CLEAN)
==========================================================
Goal: function build passes; routing and cookies behavior are correct.

C1) NETLIFY ROUTING (netlify.toml expected content)
[build]
  functions = "netlify/functions"
[[redirects]]
  from = "/api/auth/*"
  to = "/.netlify/functions/auth"
  status = 200

C2) FUNCTION BRIDGE (netlify/functions/auth.ts)
- Translate Netlify event to a standard Request for auth.handler.
- Add CORS headers with origin filtered via trustedOrigins; set Access-Control-Allow-Credentials: true.
- Handle OPTIONS preflight.
- If multiple cookies are set, return them using multiValueHeaders: { "Set-Cookie": [...] }.

C3) BUILD TEST
- Run:
  pnpm netlify:build
- Ensure no compile/bundle errors.

===========================
FILES THAT MUST EXIST (final)
===========================
.
├─ src/              (auth.ts, server.ts, env.ts)
├─ netlify/
│  └─ functions/     (auth.ts bridge)
├─ prisma/           (schema.prisma)
├─ .env.example
├─ netlify.toml
├─ package.json
├─ tsconfig.json
├─ .replit
└─ README.md

KEY EXPECTATIONS (overwrite if needed):
- package.json: no express/vite; ESM; scripts per spec; deps = fastify, @fastify/cors, better-auth, @prisma/client, zod, undici; devDeps = typescript, tsx, prisma, @types/node, @netlify/functions, netlify-cli.
- src/env.ts: zod-validated env; exports env and trustedOrigins; PORT reads process.env.PORT || 3000.
- src/auth.ts: betterAuth + prismaAdapter; plugins (admin, organization, apiKey, jwt, bearer); session.cookieCache=false; trustedOrigins; secret; emailAndPassword.enabled=true.
- src/server.ts: Fastify + @fastify/cors (credentials:true, origin check); catch-all /api/auth/*; GET /me; GET /healthz; listen 0.0.0.0:PORT.
- netlify/functions/auth.ts: bridge to auth.handler with CORS, multiValueHeaders, OPTIONS support.
- .env.example: includes all required variables.
- README.md: clear instructions for local (incl. Replit) and Netlify usage.

=======================
ACCEPTANCE CRITERIA
=======================
- Express & Vite fully removed (no files/imports/deps).
- Replit: service starts; /healthz and /api/auth/* respond; smoke tests return 2xx and set session cookie.
- TypeScript build clean (pnpm build = 0 errors).
- Netlify build passes; function compiles; cookies handled via multiValueHeaders.
- Final output MUST include:
  1) Compliance Report Table (before/after each audit item)
  2) Diff Summary (created/modified/removed files)
  3) Commands executed & outputs
  4) Smoke test transcripts (status lines + key headers)
  5) Explicit confirmation line:
     “Express & Vite removed; Fastify only; Replit OK; Netlify build OK.”

==========================
COMMANDS TO EXECUTE (order)
==========================
- Clean:
  pnpm remove express @types/express vite vite-node @vitejs/plugin-* --silent || true
  git rm -f server/vite.ts vite.config.* || true
- Install & generate:
  pnpm i
  pnpm prisma generate
  npx @better-auth/cli generate prisma --yes
  pnpm prisma migrate deploy || pnpm prisma migrate dev --name init
  pnpm prisma generate
- Type-check & run:
  pnpm build
  pnpm dev
- Netlify build check:
  pnpm netlify:build

END OF PROMPT