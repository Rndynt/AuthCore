You are a meticulous senior Node/TypeScript engineer. Build a production-ready Auth Service using Fastify + better-auth with these capabilities:

- End-user auth: Email & Password
- Plugins: Admin, Organization (RBAC), API Key, JWT (and Bearer helper)
- Secure session cookies, CORS with credentials, trustedOrigins
- Database: PostgreSQL via Prisma (schema generated by better-auth CLI)
- Local dev: Fastify server exposing /api/auth/* and /me
- Production: Netlify Functions (Node) bridging auth.handler at /.netlify/functions/auth with redirect from /api/auth/*
- Include README, scripts, and smoke tests (curl) to verify sign-up/sign-in/session
- TypeScript everywhere, ESM, strict

IMPORTANT RULES:
- Produce all files exactly as requested (no placeholders).
- Use pnpm (fallback npm if pnpm unavailable).
- Ensure zero TypeScript errors.
- Use session.cookieCache=false to simplify Set-Cookie behavior on Netlify.
- Keep CORS credentials enabled and enforce trustedOrigins list.

0) PROJECT SETUP
- Initialize a fresh Node + TypeScript project (ESM).
- Use the following exact file tree:

FILE TREE (exact)
.
├─ src/
│  ├─ auth.ts
│  ├─ server.ts
│  ├─ env.ts
├─ netlify/
│  └─ functions/
│     └─ auth.ts
├─ prisma/
│  └─ schema.prisma
├─ .env.example
├─ netlify.toml
├─ package.json
├─ tsconfig.json
└─ README.md

1) DEPENDENCIES
Install runtime deps: fastify, @fastify/cors, better-auth, @prisma/client, zod, undici
Install dev deps: typescript, tsx, prisma, @types/node, @netlify/functions, netlify-cli

Commands (use pnpm; if not available, replace pnpm with npm):
pnpm add fastify @fastify/cors better-auth @prisma/client zod undici
pnpm add -D typescript tsx prisma @types/node @netlify/functions netlify-cli

2) CREATE FILE: package.json  (ESM + scripts)
{
  "name": "auth-service-better-auth",
  "version": "1.0.0",
  "type": "module",
  "private": true,
  "engines": { "node": ">=18.17" },
  "scripts": {
    "dev": "tsx src/server.ts",
    "build": "tsc -p tsconfig.json",
    "start": "node dist/server.js",
    "prisma:gen": "prisma generate",
    "prisma:push": "prisma db push",
    "prisma:migrate": "prisma migrate dev --name init",
    "prisma:deploy": "prisma migrate deploy",
    "better-auth:gen": "npx @better-auth/cli generate prisma --yes",
    "smoke:signup": "curl -i -c cookie.txt -b cookie.txt -X POST http://localhost:4000/api/auth/sign-up/email -H 'Content-Type: application/json' --data '{\"email\":\"demo@example.com\",\"password\":\"Passw0rd!\"}'",
    "smoke:signin": "curl -i -c cookie.txt -b cookie.txt -X POST http://localhost:4000/api/auth/sign-in/email -H 'Content-Type: application/json' --data '{\"email\":\"demo@example.com\",\"password\":\"Passw0rd!\"}'",
    "smoke:session": "curl -i -c cookie.txt -b cookie.txt http://localhost:4000/api/auth/session",
    "netlify:dev": "netlify dev",
    "netlify:build": "netlify build",
    "netlify:serve": "netlify serve"
  }
}

3) CREATE FILE: tsconfig.json (strict ESM)
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "lib": ["ES2022", "DOM"],
    "types": ["node"],
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "skipLibCheck": true,
    "outDir": "dist",
    "rootDir": "."
  },
  "include": ["src", "netlify/functions", "prisma"]
}

4) CREATE FILE: .env.example
# App
PORT=4000
BETTER_AUTH_URL=http://localhost:4000
BETTER_AUTH_SECRET=changeme-long-random

# CORS / Trusted Origins (comma separated)
TRUSTED_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:4000

# Database (local)
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/authdb?schema=public

5) CREATE FILE: prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
# Models will be appended by better-auth CLI generator.

Run these commands sequentially after creating files:
pnpm prisma:gen
pnpm better-auth:gen
pnpm prisma:migrate
pnpm prisma:gen

6) CREATE FILE: src/env.ts  (env validation and trusted origins helper)
import { z } from "zod";

const envSchema = z.object({
  PORT: z.coerce.number().default(4000),
  BETTER_AUTH_URL: z.string().url(),
  BETTER_AUTH_SECRET: z.string().min(24),
  TRUSTED_ORIGINS: z.string().default("http://localhost:3000"),
  DATABASE_URL: z.string().url()
});

export const env = envSchema.parse(process.env);

export const trustedOrigins = env.TRUSTED_ORIGINS
  .split(",")
  .map(s => s.trim())
  .filter(Boolean);

7) CREATE FILE: src/auth.ts  (better-auth config + plugins)
import { betterAuth } from "better-auth";
import { prismaAdapter } from "better-auth/adapters/prisma";
import { PrismaClient } from "@prisma/client";
import { trustedOrigins, env } from "./env.js";

// Plugins
import { admin, organization } from "better-auth/plugins";
import { apiKey } from "better-auth/plugins";
import { jwt } from "better-auth/plugins";
import { bearer } from "better-auth/plugins";

const prisma = new PrismaClient();

export const auth = betterAuth({
  database: prismaAdapter(prisma, { provider: "postgresql" }),

  // Public base URL of this Auth service (match Netlify domain in prod)
  url: env.BETTER_AUTH_URL,

  // Keep it simple for Netlify: single Set-Cookie
  session: { cookieCache: false },

  // Cross-origin callers (frontends, admin dashboards)
  trustedOrigins,

  // Enable email/password
  emailAndPassword: { enabled: true },

  // Secret for token/cookie signing
  secret: env.BETTER_AUTH_SECRET,

  plugins: [
    admin(),
    organization(),
    apiKey(), // S2S via x-api-key (mock session)
    jwt(),    // Token issuance + JWKS for offline verification
    bearer()  // Helper for Bearer APIs (use carefully)
  ],
});

8) CREATE FILE: src/server.ts  (Fastify dev server for local)
import Fastify from "fastify";
import cors from "@fastify/cors";
import { auth } from "./auth.js";
import { env, trustedOrigins } from "./env.js";

const app = Fastify({ logger: true });

await app.register(cors, {
  origin: (origin, cb) => {
    if (!origin) return cb(null, true);
    const ok = trustedOrigins.includes(origin);
    cb(null, ok);
  },
  credentials: true,
  methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization", "X-Requested-With", "x-api-key"]
});

// Catch-all route for better-auth
app.route({
  method: ["GET", "POST"],
  url: "/api/auth/*",
  handler: async (request, reply) => {
    const base = `http://${request.headers.host}`;
    const url = new URL(request.url, base);
    const headers = new Headers();
    for (const [k, v] of Object.entries(request.headers)) {
      if (v) headers.set(k, Array.isArray(v) ? v.join(",") : String(v));
    }

    const body = request.body
      ? (typeof request.body === "string" ? request.body : JSON.stringify(request.body))
      : undefined;

    const res = await auth.handler(new Request(url.toString(), {
      method: request.method,
      headers,
      body
    }));

    reply.status(res.status);
    res.headers.forEach((val, key) => reply.header(key, val));
    const text = await res.text().catch(() => "");
    reply.send(text);
  }
});

// Helper route to resolve current session (cookie/x-api-key/bearer)
app.get("/me", async (req, reply) => {
  const headers = new Headers();
  for (const [k, v] of Object.entries(req.headers)) {
    if (v) headers.set(k, Array.isArray(v) ? v.join(",") : String(v));
  }
  const session = await auth.api.getSession({ headers });
  reply.send(session);
});

app.listen({ host: "0.0.0.0", port: env.PORT });

9) CREATE FILE: netlify.toml  (route /api/auth/* to the function)
[build]
  functions = "netlify/functions"

[[redirects]]
  from = "/api/auth/*"
  to = "/.netlify/functions/auth"
  status = 200

10) CREATE FILE: netlify/functions/auth.ts  (bridge auth.handler)
import type { Handler } from "@netlify/functions";
import { auth } from "../../src/auth.js";
import { trustedOrigins } from "../../src/env.js";

const allowOrigin = (origin?: string) => {
  if (!origin) return trustedOrigins[0] ?? "*";
  return trustedOrigins.includes(origin) ? origin : trustedOrigins[0] ?? "*";
};

export const handler: Handler = async (event) => {
  // CORS preflight
  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 200,
      headers: {
        "Access-Control-Allow-Origin": allowOrigin(event.headers.origin),
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET,POST,PUT,DELETE,OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Requested-With, x-api-key"
      },
      body: ""
    };
  }

  const url = new URL(event.rawUrl);
  const headers = new Headers();
  for (const [k, v] of Object.entries(event.headers)) if (v) headers.set(k, String(v));

  const body = event.body
    ? (event.isBase64Encoded ? Buffer.from(event.body, "base64") : event.body)
    : undefined;

  const res = await auth.handler(new Request(url.toString(), {
    method: event.httpMethod,
    headers,
    body
  }));

  const singleHeaders: Record<string, string> = {
    "Access-Control-Allow-Origin": allowOrigin(event.headers.origin),
    "Access-Control-Allow-Credentials": "true"
  };
  const setCookies: string[] = [];

  res.headers.forEach((val, key) => {
    if (key.toLowerCase() === "set-cookie") {
      setCookies.push(val);
    } else {
      singleHeaders[key] = val;
    }
  });

  const text = await res.text().catch(() => "");
  return {
    statusCode: res.status,
    headers: singleHeaders,
    multiValueHeaders: setCookies.length ? { "Set-Cookie": setCookies } : undefined,
    body: text
  };
};

11) CREATE FILE: README.md  (usage, env, smoke tests)
# Auth Service (Fastify + better-auth) with Prisma Postgres and Netlify Functions

Capabilities:
- Email/password login
- Admin and Organization (RBAC) plugins
- API Key for service-to-service (x-api-key creates mock session)
- JWT (+JWKS) for offline verification (polyglot services)
- CORS credentials + trustedOrigins
- Local Fastify dev server; production via Netlify Functions

## Environment
Copy .env.example to .env for local dev and set:
- BETTER_AUTH_URL=http://localhost:4000 (local) or your Netlify URL in prod
- BETTER_AUTH_SECRET=<long random string>
- TRUSTED_ORIGINS=https://your-frontend-domain,http://localhost:3000
- DATABASE_URL=postgresql connection string

## Database
pnpm prisma:gen
pnpm better-auth:gen
pnpm prisma:migrate
pnpm prisma:gen

## Run locally
pnpm dev
Visit http://localhost:4000/api/auth/session

## Smoke tests (local)
Sign-up:
curl -i -c cookie.txt -b cookie.txt -X POST http://localhost:4000/api/auth/sign-up/email -H "Content-Type: application/json" --data '{"email":"demo@example.com","password":"Passw0rd!"}'
Sign-in:
curl -i -c cookie.txt -b cookie.txt -X POST http://localhost:4000/api/auth/sign-in/email -H "Content-Type: application/json" --data '{"email":"demo@example.com","password":"Passw0rd!"}'
Get session:
curl -i -c cookie.txt -b cookie.txt http://localhost:4000/api/auth/session

## Service-to-service
- Create a dedicated "service user" and generate an API key via Admin/API.
- Call protected routes with header: x-api-key: <key>.
- For polyglot services use JWT and validate against JWKS exposed by the JWT plugin.

## Netlify
- netlify.toml already redirects /api/auth/* to the function "auth".
- Set Environment Variables in Netlify UI:
  - BETTER_AUTH_URL=https://<your-netlify-site>.netlify.app
  - BETTER_AUTH_SECRET=<long random>
  - TRUSTED_ORIGINS=https://<your-frontend-domain>,http://localhost:3000
  - DATABASE_URL=postgres (Netlify Postgres or external managed)
- Deploy via connected repo; ensure "pnpm prisma:deploy" runs on build (Netlify will run build; you can add a postbuild hook or rely on prisma generate/deploy in build pipeline).

## Notes
- For multiple cookies, Netlify requires multiValueHeaders; using session.cookieCache=false keeps it to a single cookie by default.
- Frontends must send credentials: 'include' and be listed in TRUSTED_ORIGINS.
- This service is framework-agnostic for consumers: Next.js/React/Node/Go can consume APIs and JWTs.

12) EXECUTION ORDER (agent should run in order)
- Create all files as above.
- Install dependencies.
- Run: pnpm prisma:gen; pnpm better-auth:gen; pnpm prisma:migrate; pnpm prisma:gen.
- Run local dev: pnpm dev and perform smoke tests.
- Prepare Netlify deployment (env vars set); run netlify:build locally if needed; then deploy via repo connection.

END OF PROMPT