    You are a meticulous Senior Technical Writer + Node/TypeScript engineer. Your job is to UPDATE the **AuthCore** repository documentation so it is complete, accurate, and production-grade. **Do not delegate to sub-agents.** Make the edits yourself and commit them when done.

    REPO: https://github.com/Rndynt/AuthCore
    EXAMPLE DEPLOYMENTS (use in examples and validation):
    • Netlify (prod): https://transity-auth.netlify.app
    • Replit (dev):  https://c25f0f2e-887e-4494-845b-803084ff23ee-00-2rxeabtep8sj0.janeway.replit.dev

    OBJECTIVE
    • Replace the root README with a SINGLE, comprehensive, copy-pasteable guide that reflects the current code (Fastify + better-auth, Prisma/Postgres, Netlify Functions, Replit, Admin, Organization, API Key, JWT/Bearer, CORS/trustedOrigins, and DEV QA endpoints).
    • README must be self-contained (one file). You may add a tiny /docs folder for deep dives only if it clearly helps; README remains the source of truth.

    ----------------------------------------------------------------
    REQUIRED WORK (do all)
    1) OVERWRITE the root README.md with a brand new, production-grade document that includes all sections listed in “README CONTENT REQUIREMENTS” below.
    2) VALIDATE every example (curl, Prisma, scripts) against this repo and the two real base URLs (Netlify + Replit). Fix any mismatches.
    3) (OPTIONAL) Add /docs with concise deep dives and link them from README:
       • /docs/jwt-jwks.md — how to mint/verify JWT using jose with JWKS
       • /docs/organizations.md — org/tenant roles & flows (owner/admin/member)
       Keep them short; README stays authoritative.
    4) COMMIT the changes with a clear message (e.g., “docs: rewrite README with full feature guide, S2S patterns, QA endpoints, troubleshooting”).
    5) PRINT a short report at the end: files changed, a 20-line Table of Contents preview from the new README, and a checklist confirming docs match code.

    ----------------------------------------------------------------
    README CONTENT REQUIREMENTS (write all of this in README.md)
    A) Title & Badges
       • Title: “AuthCore — Fastify + Better-Auth (Headless Authentication Service)”
       • Badges: Node >= 18, DB: PostgreSQL + Prisma, Deploy: Netlify Functions, License: MIT
    B) Overview (What & Why)
       • Headless auth microservice for many microservices/apps.
       • End-user session (email/password cookies), S2S (API Key + JWT), multi-tenant org/roles.
       • Links to live bases (Netlify + Replit) used throughout examples.
    C) Feature Matrix (table)
       • End-user: email/password; cookie sessions; session inspect
       • S2S: API Key (mock session), JWT/Bearer (offline verify via JWKS)
       • Organizations: roles (owner/admin/member), membership checks
       • Admin: list users, (optional dev) impersonation, key management
       • Transport: Fastify; CORS with credentials; trustedOrigins
       • Deploy: Netlify Functions; Dev: Replit
       • QA: DEV-only endpoints behind ENABLE_DEV_ENDPOINTS=true
    D) Architecture (ASCII diagram)
       • Clients → /api/auth/* → better-auth handler
       • S2S paths: x-api-key and Bearer JWT; JWKS verification path
       • Prisma → PostgreSQL (e.g., Neon)
       • Netlify rewrite: /api/auth/* → /.netlify/functions/auth
    E) Prerequisites
       • Node >= 18; pnpm (or npm/yarn); PostgreSQL (Neon recommended)
    F) Environment Variables (with example .env block)
       • PORT (Replit uses process.env.PORT; listen 0.0.0.0:PORT)
       • BETTER_AUTH_URL (public base: Netlify in prod; Replit in dev)
       • BETTER_AUTH_SECRET (long random)
       • TRUSTED_ORIGINS (comma-separated domains; include your FE + service domains)
       • DATABASE_URL (Postgres; include TLS for serverless: ?sslmode=require)
       • ENABLE_DEV_ENDPOINTS (false by default; true only in QA/dev)
       Include notes about TLS and credentials requirement for browsers.
    G) Database (PostgreSQL + Prisma)
       • Recommend Neon; example connection string with sslmode=require
       • Initial schema/migration sequence (copy-paste block):
         pnpm prisma generate
         npx @better-auth/cli generate prisma --yes
         pnpm prisma migrate deploy || pnpm prisma migrate dev --name init
         pnpm prisma generate
       • Mention prisma db push for fresh dev only if migrations unavailable.
    H) Install & Run
       • Netlify: env vars, netlify.toml redirect; local build test via `pnpm netlify:build`
       • Replit: .replit runs `pnpm dev`; secrets set; listen on ${PORT}
       • Optional “local dev” notes if applicable
    I) HTTP Endpoints (Core) with cURL for BOTH bases (Netlify + Replit)
       • POST /api/auth/sign-up/email — JSON {email,password}; sets cookie
       • POST /api/auth/sign-in/email — JSON {email,password}; sets cookie
       • GET  /api/auth/session       — returns session/null (send cookie)
       • GET  /me                     — echoes resolved identity from cookie/x-api-key/Bearer
       Provide curl examples using:
       NETLIFY=https://transity-auth.netlify.app
       REPLIT=https://c25f0f2e-887e-4494-845b-803084ff23ee-00-2rxeabtep8sj0.janeway.replit.dev
    J) Service-to-Service Patterns (with examples)
       • API Key
         - Header: x-api-key: <KEY> → AuthCore creates a mock session of key owner
         - Use case: internal microservices; same RBAC checks as sessions
         - Curl example calling /me with x-api-key
       • JWT / Bearer + JWKS
         - Mint short-lived JWT (via dev endpoint or app flow)
         - Resource servers verify offline using JWKS
         - Node verification snippet with jose + JWKS URL
         - Call /me with Authorization: Bearer <JWT> (dev QA mode)
    K) Organizations (Multi-Tenant)
       • Concepts: org/tenant, roles (owner/admin/member), membership
       • Typical flow: create org → add/invite member → set role → send org context downstream (e.g., X-Org-Id header)
       • If dev endpoints exist, include curl for create/add/set/list examples
    L) Admin (Ops)
       • Capabilities: list users; revoke sessions; (optional dev) impersonation; API key management
       • Security stance: protect admin routes (private network/VPN)
    M) DEV QA Endpoints (Guarded)
       • ENABLE_DEV_ENDPOINTS=true to enable; otherwise /dev/* returns 404
       • List endpoints and purpose:
         - GET /dev/whoami — show identity/memberships; supports cookie/x-api-key/Bearer
         - POST /dev/api-keys — create key (self/admin)
         - GET /dev/api-keys?userId=… — list keys (admin/owner)
         - DELETE /dev/api-keys/:keyId — revoke key
         - POST /dev/jwt/issue — issue short-lived JWT (audience/scopes/ttl)
         - GET /dev/jwks.json — JWKS for verification
         - POST /dev/orgs — create org
         - POST /dev/orgs/:orgId/members — add member (role)
         - PATCH /dev/orgs/:orgId/members/:userId — set role
         - GET /dev/orgs/:orgId/members — list members
       • Provide curl for both bases (Netlify/Replit) for each dev endpoint.
       • Big warning: NEVER enable in production.
    N) CORS & Cookies
       • Browsers must send credentials; ensure your FE domain is in TRUSTED_ORIGINS
       • Cookie hardening: Secure, HttpOnly, SameSite=None for cross-site
       • Netlify note: multiValueHeaders for multiple cookies (kept simple via session.cookieCache=false)
    O) Security Notes
       • Keep ENABLE_DEV_ENDPOINTS=false in prod
       • Rotate API keys; store securely
       • Use short TTLs for JWT; validate iss/aud/exp
       • Restrict admin routes; audit admin actions
    P) Troubleshooting
       • 422 PrismaClientValidationError on sign-up: confirm DATABASE_URL, TLS (sslmode=require), then run the schema/migration sequence; ensure no Express/Vite remnants; verify Fastify handler forwards body/headers correctly
       • CORS/credentials blocked: add origin to TRUSTED_ORIGINS; send credentials: 'include'
       • Replit PORT binding: listen on 0.0.0.0:${PORT}
       • Netlify cookies: multiValueHeaders (already handled), or keep cookieCache=false
    Q) Smoke Tests
       • Provide copy-paste curl scripts for both bases: sign-up, sign-in, session, /me, and (if dev enabled) API key & JWT & org flows
       • Mention exit criteria (2xx responses, Set-Cookie present where expected)
    R) Roadmap
       • Next: Admin Dashboard UI (separate app), audit logs, org-owned API keys, etc.
    S) License
       • MIT (or update if repo specifies otherwise)
    T) Changelog
       • Add entry for this documentation rewrite (date + summary)

    ----------------------------------------------------------------
    QUALITY BAR (must pass)
    • README is one file, self-contained, with a clear Table of Contents, concise prose, and copy-paste-ready code blocks.
    • Examples use the two real base URLs and WORK when run (or clearly marked if dev-only).
    • S2S (API Key, JWT/JWKS) and Organization/Admin flows are documented with practical, minimal steps.
    • Troubleshooting covers Prisma 422, TLS, CORS/cookies, Netlify multi cookies, and Replit PORT.
    • No TODOs/placeholders; no broken links; consistent heading hierarchy.

    ----------------------------------------------------------------
    FINAL OUTPUT (print after committing)
    1) Files modified/added (list)
    2) README Table of Contents preview (first ~20 lines)
    3) Checklist (all true/false):
       - README covers all required sections
       - Examples validated on Netlify/Replit
       - S2S (API Key + JWT/JWKS) documented with examples
       - Org/Admin flows documented
       - DEV QA endpoints documented + warnings
       - Troubleshooting includes Prisma 422/CORS/TLS/PORT/multiValueHeaders
       - License & Changelog updated
    4) Any follow-up suggestions (optional) to keep docs in sync going forward
